ARM GAS  /var/folders/qd/4mxf5pkd0zdf0b9dd1hp39180000gn/T//ccjyRgzT.s 			page 1


   1              	# 1 "../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s"
   1              	/*
   0              	
   0              	
   2              	    ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    crt0_v6m.s
  22              	 * @brief   Generic ARMv6-M (Cortex-M0/M1) startup file for ChibiOS.
  23              	 *
  24              	 * @addtogroup ARMCMx_GCC_STARTUP_V6M
  25              	 * @{
  26              	 */
  27              	
  28              	/*===========================================================================*/
  29              	/* Module constants.                                                         */
  30              	/*===========================================================================*/
  31              	
  32              	#if !defined(FALSE) || defined(__DOXYGEN__)
  33              	#define FALSE                               0
  34              	#endif
  35              	
  36              	#if !defined(TRUE) || defined(__DOXYGEN__)
  37              	#define TRUE                                1
  38              	#endif
  39              	
  40              	#define CONTROL_MODE_PRIVILEGED             0
  41              	#define CONTROL_MODE_UNPRIVILEGED           1
  42              	#define CONTROL_USE_MSP                     0
  43              	#define CONTROL_USE_PSP                     2
  44              	
  45              	/*===========================================================================*/
  46              	/* Module pre-compile time settings.                                         */
  47              	/*===========================================================================*/
  48              	
  49              	/**
  50              	 * @brief   Control special register initialization value.
  51              	 * @details The system is setup to run in privileged mode using the PSP
  52              	 *          stack (dual stack mode).
  53              	 */
  54              	#if !defined(CRT0_CONTROL_INIT) || defined(__DOXYGEN__)
ARM GAS  /var/folders/qd/4mxf5pkd0zdf0b9dd1hp39180000gn/T//ccjyRgzT.s 			page 2


  55              	#define CRT0_CONTROL_INIT                   (CONTROL_USE_PSP |              \
  56              	                                             CONTROL_MODE_PRIVILEGED)
  57              	#endif
  58              	
  59              	/**
  60              	 * @brief   Stack segments initialization switch.
  61              	 */
  62              	#if !defined(CRT0_STACKS_FILL_PATTERN) || defined(__DOXYGEN__)
  63              	#define CRT0_STACKS_FILL_PATTERN            0x55555555
  64              	#endif
  65              	
  66              	/**
  67              	 * @brief   Stack segments initialization switch.
  68              	 */
  69              	#if !defined(CRT0_INIT_STACKS) || defined(__DOXYGEN__)
  70              	#define CRT0_INIT_STACKS                    TRUE
  71              	#endif
  72              	
  73              	/**
  74              	 * @brief   DATA segment initialization switch.
  75              	 */
  76              	#if !defined(CRT0_INIT_DATA) || defined(__DOXYGEN__)
  77              	#define CRT0_INIT_DATA                      TRUE
  78              	#endif
  79              	
  80              	/**
  81              	 * @brief   BSS segment initialization switch.
  82              	 */
  83              	#if !defined(CRT0_INIT_BSS) || defined(__DOXYGEN__)
  84              	#define CRT0_INIT_BSS                       TRUE
  85              	#endif
  86              	
  87              	/**
  88              	 * @brief   Constructors invocation switch.
  89              	 */
  90              	#if !defined(CRT0_CALL_CONSTRUCTORS) || defined(__DOXYGEN__)
  91              	#define CRT0_CALL_CONSTRUCTORS              TRUE
  92              	#endif
  93              	
  94              	/**
  95              	 * @brief   Destructors invocation switch.
  96              	 */
  97              	#if !defined(CRT0_CALL_DESTRUCTORS) || defined(__DOXYGEN__)
  98              	#define CRT0_CALL_DESTRUCTORS               TRUE
  99              	#endif
 100              	
 101              	/*===========================================================================*/
 102              	/* Code section.                                                             */
 103              	/*===========================================================================*/
 104              	
 105              	#if !defined(__DOXYGEN__)
 106              	
 107              	                .cpu    cortex-m0
 108              	                .fpu    softvfp
 109              	
 110              	                .thumb
 111              	                .text
ARM GAS  /var/folders/qd/4mxf5pkd0zdf0b9dd1hp39180000gn/T//ccjyRgzT.s 			page 3


 112              	
 113              	/*
 114              	 * Reset handler.
 115              	 */
 116              	                .align  2
 117              	                .thumb_func
 118              	                .global Reset_Handler
 119              	Reset_Handler:
 120              	                /* Interrupts are globally masked initially.*/
 121 0000 72B6     	                cpsid   i
 122              	
 123              	                /* PSP stack pointers initialization.*/
 124 0002 2048     	                ldr     r0, =__process_stack_end__
 125 0004 80F30988 	                msr     PSP, r0
 126              	
 127              	                /* CPU mode initialization as configured.*/
 128 0008 0220     	                movs    r0, #CRT0_CONTROL_INIT
 129 000a 80F31488 	                msr     CONTROL, r0
 130 000e BFF36F8F 	                isb
 131              	
 132              	                /* Early initialization..*/
 133 0012 FFF7FEFF 	                bl      __early_init
 134              	
 135              	#if CRT0_INIT_STACKS == TRUE
 136 0016 1C48     	                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 137              	                /* Main Stack initialization. Note, it assumes that the
 138              	                   stack size is a multiple of 4 so the linker file must
 139              	                   ensure this.*/
 140 0018 1C49     	                ldr     r1, =__main_stack_base__
 141 001a 1D4A     	                ldr     r2, =__main_stack_end__
 142              	msloop:
 143 001c 9142     	                cmp     r1, r2
 144 001e 02DA     	                bge     endmsloop
 145 0020 0860     	                str     r0, [r1]
 146 0022 0431     	                add     r1, r1, #4
 147 0024 FAE7     	                b       msloop
 148              	endmsloop:
 149              	                /* Process Stack initialization. Note, it assumes that the
 150              	                   stack size is a multiple of 4 so the linker file must
 151              	                   ensure this.*/
 152 0026 1B49     	                ldr     r1, =__process_stack_base__
 153 0028 164A     	                ldr     r2, =__process_stack_end__
 154              	psloop:
 155 002a 9142     	                cmp     r1, r2
 156 002c 02DA     	                bge     endpsloop
 157 002e 0860     	                str     r0, [r1]
 158 0030 0431     	                add     r1, r1, #4
 159 0032 FAE7     	                b       psloop
 160              	endpsloop:
 161              	#endif
 162              	
 163              	#if CRT0_INIT_DATA == TRUE
 164              	                /* Data initialization. Note, it assumes that the DATA size
 165              	                  is a multiple of 4 so the linker file must ensure this.*/
 166 0034 1849     	                ldr     r1, =_textdata
 167 0036 194A     	                ldr     r2, =_data
 168 0038 194B     	                ldr     r3, =_edata
ARM GAS  /var/folders/qd/4mxf5pkd0zdf0b9dd1hp39180000gn/T//ccjyRgzT.s 			page 4


 169              	dloop:
 170 003a 9A42     	                cmp     r2, r3
 171 003c 04DA     	                bge     enddloop
 172 003e 0868     	                ldr     r0, [r1]
 173 0040 1060     	                str     r0, [r2]
 174 0042 0431     	                add     r1, r1, #4
 175 0044 0432     	                add     r2, r2, #4
 176 0046 F8E7     	                b       dloop
 177              	enddloop:
 178              	#endif
 179              	
 180              	#if CRT0_INIT_BSS == TRUE
 181              	                /* BSS initialization. Note, it assumes that the DATA size
 182              	                  is a multiple of 4 so the linker file must ensure this.*/
 183 0048 0020     	                movs    r0, #0
 184 004a 1649     	                ldr     r1, =_bss_start
 185 004c 164A     	                ldr     r2, =_bss_end
 186              	bloop:
 187 004e 9142     	                cmp     r1, r2
 188 0050 02DA     	                bge     endbloop
 189 0052 0860     	                str     r0, [r1]
 190 0054 0431     	                add     r1, r1, #4
 191 0056 FAE7     	                b       bloop
 192              	endbloop:
 193              	#endif
 194              	
 195              	                /* Late initialization..*/
 196 0058 FFF7FEFF 	                bl      __late_init
 197              	
 198              	#if CRT0_CALL_CONSTRUCTORS == TRUE
 199              	                /* Constructors invocation.*/
 200 005c 134C     	                ldr     r4, =__init_array_start
 201 005e 144D     	                ldr     r5, =__init_array_end
 202              	initloop:
 203 0060 AC42     	                cmp     r4, r5
 204 0062 03DA     	                bge     endinitloop
 205 0064 2168     	                ldr     r1, [r4]
 206 0066 8847     	                blx     r1
 207 0068 0434     	                add     r4, r4, #4
 208 006a F9E7     	                b       initloop
 209              	endinitloop:
 210              	#endif
 211              	
 212              	                /* Main program invocation, r0 contains the returned value.*/
 213 006c FFF7FEFF 	                bl      main
 214              	
 215              	#if CRT0_CALL_CONSTRUCTORS == TRUE
 216              	                /* Destructors invocation.*/
 217 0070 104C     	                ldr     r4, =__fini_array_start
 218 0072 114D     	                ldr     r5, =__fini_array_end
 219              	finiloop:
 220 0074 AC42     	                cmp     r4, r5
 221 0076 03DA     	                bge     endfiniloop
 222 0078 2168     	                ldr     r1, [r4]
 223 007a 8847     	                blx     r1
 224 007c 0434     	                add     r4, r4, #4
 225 007e F9E7     	                b       finiloop
ARM GAS  /var/folders/qd/4mxf5pkd0zdf0b9dd1hp39180000gn/T//ccjyRgzT.s 			page 5


 226              	endfiniloop:
 227              	#endif
 228              	
 229              	                /* Branching to the defined exit handler.*/
 230 0080 0E49     	                ldr     r1, =__default_exit
 231 0082 08470000 	                bx      r1
 231      00005555 
 231      55550000 
 231      00000000 
 231      00000000 
ARM GAS  /var/folders/qd/4mxf5pkd0zdf0b9dd1hp39180000gn/T//ccjyRgzT.s 			page 6


DEFINED SYMBOLS
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:116    .text:0000000000000000 $t
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:119    .text:0000000000000000 Reset_Handler
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:142    .text:000000000000001c msloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:148    .text:0000000000000026 endmsloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:154    .text:000000000000002a psloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:160    .text:0000000000000034 endpsloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:169    .text:000000000000003a dloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:177    .text:0000000000000048 enddloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:186    .text:000000000000004e bloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:192    .text:0000000000000058 endbloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:202    .text:0000000000000060 initloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:209    .text:000000000000006c endinitloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:219    .text:0000000000000074 finiloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:226    .text:0000000000000080 endfiniloop
../../../../os/common/ports/ARMCMx/compilers/GCC/crt0_v6m.s:231    .text:0000000000000084 $d

UNDEFINED SYMBOLS
__process_stack_end__
__early_init
__main_stack_base__
__main_stack_end__
__process_stack_base__
_textdata
_data
_edata
_bss_start
_bss_end
__late_init
__init_array_start
__init_array_end
main
__fini_array_start
__fini_array_end
__default_exit
